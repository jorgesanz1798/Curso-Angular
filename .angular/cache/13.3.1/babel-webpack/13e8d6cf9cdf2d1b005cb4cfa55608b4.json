{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.baseUrl;\n    }\n\n    get usuario() {\n      return Object.assign({}, this._usuario);\n    }\n\n    registro(name, email, password) {\n      const url = `${this.baseUrl}/auth/new`;\n      const body = {\n        email,\n        password,\n        name\n      };\n      return this.http.post(url, body).pipe(tap(({\n        ok,\n        token\n      }) => {\n        if (ok) {\n          localStorage.setItem('token', token);\n        }\n      }), map(resp => resp.ok), catchError(err => of(err.error.msg)));\n    }\n\n    login(email, password) {\n      const url = `${this.baseUrl}/auth`;\n      const body = {\n        email,\n        password\n      };\n      return this.http.post(url, body).pipe(tap(resp => {\n        if (resp.ok) {\n          localStorage.setItem('token', resp.token);\n        }\n      }), map(resp => resp.ok), catchError(err => of(err.error.msg)));\n    }\n\n    validarToken() {\n      const url = `${this.baseUrl}/auth/renew`;\n      const headers = new HttpHeaders().set('x-token', localStorage.getItem('token') || '');\n      return this.http.get(url, {\n        headers\n      }).pipe(map(resp => {\n        localStorage.setItem('token', resp.token);\n        this._usuario = {\n          name: resp.name,\n          uid: resp.uid,\n          email: resp.email\n        };\n        return resp.ok;\n      }), catchError(err => of(false)));\n    }\n\n    logout() {\n      localStorage.clear();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}